// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/device_config_store.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceConfigStoreService_Create_FullMethodName                     = "/api.DeviceConfigStoreService/Create"
	DeviceConfigStoreService_Get_FullMethodName                        = "/api.DeviceConfigStoreService/Get"
	DeviceConfigStoreService_Update_FullMethodName                     = "/api.DeviceConfigStoreService/Update"
	DeviceConfigStoreService_Delete_FullMethodName                     = "/api.DeviceConfigStoreService/Delete"
	DeviceConfigStoreService_List_FullMethodName                       = "/api.DeviceConfigStoreService/List"
	DeviceConfigStoreService_GetConfigStoreAlignment_FullMethodName    = "/api.DeviceConfigStoreService/GetConfigStoreAlignment"
	DeviceConfigStoreService_GetAvailableUplinkChannels_FullMethodName = "/api.DeviceConfigStoreService/GetAvailableUplinkChannels"
)

// DeviceConfigStoreServiceClient is the client API for DeviceConfigStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceConfigStoreServiceClient interface {
	// Create configuration store for the device.
	Create(ctx context.Context, in *CreateDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get returns the configuration store for the given DevEUI.
	Get(ctx context.Context, in *GetDeviceConfigStoreRequest, opts ...grpc.CallOption) (*GetDeviceConfigStoreResponse, error)
	// Update the configuration store for the given device.
	Update(ctx context.Context, in *UpdateDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete removes the configuration store for the device.
	// Note: Configurations fall back to the regional default.
	Delete(ctx context.Context, in *DeleteDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List DevEUIs of devices having configuration store.
	List(ctx context.Context, in *ListDeviceConfigStoresRequest, opts ...grpc.CallOption) (*ListDeviceConfigStoresResponse, error)
	// Returns the configuration alignment status for the given device (whether
	// current configurations have been acknowledged by the device).
	GetConfigStoreAlignment(ctx context.Context, in *GetConfigStoreAlignmentRequest, opts ...grpc.CallOption) (*GetConfigStoreAlignmentResponse, error)
	// Get data on all uplink channels currently installed on the given device.
	// Note: Includes their current activation status, possibly not yet aligned.
	GetAvailableUplinkChannels(ctx context.Context, in *GetAvailableChannelsRequest, opts ...grpc.CallOption) (*GetAvailableChannelsResponse, error)
}

type deviceConfigStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceConfigStoreServiceClient(cc grpc.ClientConnInterface) DeviceConfigStoreServiceClient {
	return &deviceConfigStoreServiceClient{cc}
}

func (c *deviceConfigStoreServiceClient) Create(ctx context.Context, in *CreateDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) Get(ctx context.Context, in *GetDeviceConfigStoreRequest, opts ...grpc.CallOption) (*GetDeviceConfigStoreResponse, error) {
	out := new(GetDeviceConfigStoreResponse)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) Update(ctx context.Context, in *UpdateDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) Delete(ctx context.Context, in *DeleteDeviceConfigStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) List(ctx context.Context, in *ListDeviceConfigStoresRequest, opts ...grpc.CallOption) (*ListDeviceConfigStoresResponse, error) {
	out := new(ListDeviceConfigStoresResponse)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) GetConfigStoreAlignment(ctx context.Context, in *GetConfigStoreAlignmentRequest, opts ...grpc.CallOption) (*GetConfigStoreAlignmentResponse, error) {
	out := new(GetConfigStoreAlignmentResponse)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_GetConfigStoreAlignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceConfigStoreServiceClient) GetAvailableUplinkChannels(ctx context.Context, in *GetAvailableChannelsRequest, opts ...grpc.CallOption) (*GetAvailableChannelsResponse, error) {
	out := new(GetAvailableChannelsResponse)
	err := c.cc.Invoke(ctx, DeviceConfigStoreService_GetAvailableUplinkChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceConfigStoreServiceServer is the server API for DeviceConfigStoreService service.
// All implementations must embed UnimplementedDeviceConfigStoreServiceServer
// for forward compatibility
type DeviceConfigStoreServiceServer interface {
	// Create configuration store for the device.
	Create(context.Context, *CreateDeviceConfigStoreRequest) (*emptypb.Empty, error)
	// Get returns the configuration store for the given DevEUI.
	Get(context.Context, *GetDeviceConfigStoreRequest) (*GetDeviceConfigStoreResponse, error)
	// Update the configuration store for the given device.
	Update(context.Context, *UpdateDeviceConfigStoreRequest) (*emptypb.Empty, error)
	// Delete removes the configuration store for the device.
	// Note: Configurations fall back to the regional default.
	Delete(context.Context, *DeleteDeviceConfigStoreRequest) (*emptypb.Empty, error)
	// List DevEUIs of devices having configuration store.
	List(context.Context, *ListDeviceConfigStoresRequest) (*ListDeviceConfigStoresResponse, error)
	// Returns the configuration alignment status for the given device (whether
	// current configurations have been acknowledged by the device).
	GetConfigStoreAlignment(context.Context, *GetConfigStoreAlignmentRequest) (*GetConfigStoreAlignmentResponse, error)
	// Get data on all uplink channels currently installed on the given device.
	// Note: Includes their current activation status, possibly not yet aligned.
	GetAvailableUplinkChannels(context.Context, *GetAvailableChannelsRequest) (*GetAvailableChannelsResponse, error)
	mustEmbedUnimplementedDeviceConfigStoreServiceServer()
}

// UnimplementedDeviceConfigStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceConfigStoreServiceServer struct {
}

func (UnimplementedDeviceConfigStoreServiceServer) Create(context.Context, *CreateDeviceConfigStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) Get(context.Context, *GetDeviceConfigStoreRequest) (*GetDeviceConfigStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) Update(context.Context, *UpdateDeviceConfigStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) Delete(context.Context, *DeleteDeviceConfigStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) List(context.Context, *ListDeviceConfigStoresRequest) (*ListDeviceConfigStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) GetConfigStoreAlignment(context.Context, *GetConfigStoreAlignmentRequest) (*GetConfigStoreAlignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigStoreAlignment not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) GetAvailableUplinkChannels(context.Context, *GetAvailableChannelsRequest) (*GetAvailableChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableUplinkChannels not implemented")
}
func (UnimplementedDeviceConfigStoreServiceServer) mustEmbedUnimplementedDeviceConfigStoreServiceServer() {
}

// UnsafeDeviceConfigStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceConfigStoreServiceServer will
// result in compilation errors.
type UnsafeDeviceConfigStoreServiceServer interface {
	mustEmbedUnimplementedDeviceConfigStoreServiceServer()
}

func RegisterDeviceConfigStoreServiceServer(s grpc.ServiceRegistrar, srv DeviceConfigStoreServiceServer) {
	s.RegisterService(&DeviceConfigStoreService_ServiceDesc, srv)
}

func _DeviceConfigStoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceConfigStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).Create(ctx, req.(*CreateDeviceConfigStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).Get(ctx, req.(*GetDeviceConfigStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConfigStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).Update(ctx, req.(*UpdateDeviceConfigStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceConfigStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).Delete(ctx, req.(*DeleteDeviceConfigStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceConfigStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).List(ctx, req.(*ListDeviceConfigStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_GetConfigStoreAlignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigStoreAlignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).GetConfigStoreAlignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_GetConfigStoreAlignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).GetConfigStoreAlignment(ctx, req.(*GetConfigStoreAlignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceConfigStoreService_GetAvailableUplinkChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceConfigStoreServiceServer).GetAvailableUplinkChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceConfigStoreService_GetAvailableUplinkChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceConfigStoreServiceServer).GetAvailableUplinkChannels(ctx, req.(*GetAvailableChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceConfigStoreService_ServiceDesc is the grpc.ServiceDesc for DeviceConfigStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceConfigStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DeviceConfigStoreService",
	HandlerType: (*DeviceConfigStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeviceConfigStoreService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeviceConfigStoreService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeviceConfigStoreService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceConfigStoreService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeviceConfigStoreService_List_Handler,
		},
		{
			MethodName: "GetConfigStoreAlignment",
			Handler:    _DeviceConfigStoreService_GetConfigStoreAlignment_Handler,
		},
		{
			MethodName: "GetAvailableUplinkChannels",
			Handler:    _DeviceConfigStoreService_GetAvailableUplinkChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/device_config_store.proto",
}
